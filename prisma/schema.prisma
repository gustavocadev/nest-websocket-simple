generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // relation many-one
  author   AuthUser @relation(name: "Author", fields: [authorId], references: [id])
  authorId String

  // relation many-many in mongodb
  contributors   AuthUser[] @relation(name: "Contributors", fields: [contributorIDs], references: [id])
  contributorIDs String[]

  createdAt    DateTime @default(now()) @db.Date
  customer     String
  deliveryDate DateTime @default(now()) @db.Date
  description  String
  name         String
  tasks        Task[]
  updatedAt    DateTime @default(now()) @db.Date

  @@map("projects")
}

model Task {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now()) @db.Date
  deliveryDate DateTime @default(now()) @db.Date
  description  String
  name         String
  priority     String
  // relation many-one
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String   @db.ObjectId
  state        Boolean  @default(false)
  updatedAt    DateTime @default(now()) @db.Date()

  // many-to-one relation
  userWhoCompletedTask AuthUser? @relation(name: "UserWhoCompletedTask", fields: [userWhoCompletedTaskId], references: [id])

  // it needs to be nullable because it can be null
  userWhoCompletedTaskId String?

  @@map("tasks")
}

model AuthUser {
  id           String        @id @map("_id")
  auth_session AuthSession[]
  auth_key     AuthKey[]

  // custom fields
  createdAt DateTime @default(now())
  email     String   @unique
  isconfirm Boolean  @default(false)
  name      String
  token     String
  updatedAt DateTime @default(now())

  // relation one-many
  projects Project[] @relation(name: "Author")

  // relation many-many in mongodb
  contributorProjects Project[] @relation(name: "Contributors", fields: [contributorIDs], references: [id])
  contributorIDs      String[]  @db.ObjectId

  // one to many
  completedTasks Task[] @relation(name: "UserWhoCompletedTask")

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @map("_id")
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @map("_id")
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
